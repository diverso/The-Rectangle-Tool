{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"The-rectangle-tool","tagline":"The rectangle tool ","body":"### Welcome to Rectangle Tool page :)\r\nI've implemented an interface in Javascript that creates rectangles and estimates their sizes and does other interesting stuff as described below.\r\n\r\n    Allows the user to specify the number of input rectangles (between 3 and 30).\r\n    Generates the requested number of input rectangles (with random widths and heights) and write them to a file (human readable).\r\n    Reads the randomly generated input rectangles from the file generated in the step above.\r\n    Displays the input rectangles graphically, correctly laid out, as in the example.\r\n    Calculates the output rectangles.\r\n    Displays the output rectangles graphically, correctly laid out as in the example above.\r\n    Writes the output rectangle coordinates into an output file (human readable). \r\n\r\n```<script>\r\nfunction doit(count) {\r\n    var x, y;\r\n    x = 0;\r\n    y = 200;\r\n    \r\n    for (var index = 0; index < count; ++index)\r\n    {\r\n      drawRectangle(x, y, 200, 100);\r\n        \r\n      // Update the coordinates for the next rectangle.\r\n      y = y + 110;\r\n      x = x + 50;\r\n    }\r\n}\r\n\r\nfunction drawRectangle(left, top, width, height) {\r\n    if (document.createElement) {\r\n        newdiv = document.createElement(\"div\");\r\n        newdiv.style.position = \"absolute\";\r\n        newdiv.style.left = left + \"px\";\r\n        newdiv.style.top = top + \"px\";\r\n        newdiv.style.width = width + \"px\";\r\n        newdiv.style.height = height + \"px\";\r\n        newdiv.style.backgroundColor = 'red';\r\n        newdiv.style.visibility = 'visible';\r\n        newdiv.id = 'newdiv';\r\n        document.body.appendChild(newdiv);\r\n\r\n        // Must update after the div is appended.\r\n        newdiv.innerHTML = \"X: \" + newdiv.offsetLeft + \"<br>Y: \" + newdiv.offsetTop + \"<br>Width: \" + newdiv.clientWidth + \"<br>Height: \" + newdiv.clientHeight;\r\n    }\r\n}\r\n\r\nfunction drawOnCanvas(count) {\r\n    var canvas = document.getElementById(\"myCanvas\");\r\n    var ctx = canvas.getContext(\"2d\");\r\n    ctx.fillStyle = \"rgb(200,0,0)\";\r\n\r\n    var listOfRects, x, y;\r\n    listOfRects = [];\r\n    x = 0;\r\n    y = 0;\r\n    for (var index = 0; index < count; ++index)\r\n    {  \r\n      listOfRects.push({\r\n          x: x,\r\n          y: y,\r\n          w: 10,\r\n          h: 15\r\n      });\r\n      // Update the coordinates for the next rectangle.\r\n      x = x + 15;\r\n      y = y + 2;\r\n    }\r\n\r\n    // Clear existing rectangles.    \r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    // Draw all the new rectangles.\r\n    for (var index = 0; index < listOfRects.length; ++index) {\r\n        var rect = listOfRects[index];\r\n        ctx.fillRect(rect.x, rect.y, rect.w, rect.h);\r\n    }\r\n}\r\n\r\n// Draw 1 rectangle on both the canvas and the divs.\r\ndrawOnCanvas(1);\r\ndoit(1);\r\n\r\n// Add handler to determine when the count has changed.\r\nvar input = document.getElementById(\"count\");\r\ninput.onchange = function() {\r\n    doit(this.value);\r\n    drawOnCanvas(this.value);\r\n};\r\n\r\n</script>```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### \r\nPlease feel free to contribute with your own tips and advices as this is just a project in progress.  \r\n\r\n","google":""}